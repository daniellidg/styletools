@import '_variables.scss';

* {
  box-sizing: border-box;
  outline: none;
}

html {
  font-family: sans-serif;
  line-height: 1.15;
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

article, aside, figcaption, figure, footer, header, hgroup, main, nav, section {
  display: block;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #212529;
  text-align: left;
  background-color: #fff;
}

h1, h2, h3, h4, h5, h6 {
  margin-top: 0;
  margin-bottom: 0.5rem;
}

p {
  margin-top: 0;
  margin-bottom: 1rem;
}

a {
  color: #007bff;
  text-decoration: none;
  background-color: transparent;
}

a:hover {
  color: #0056b3;
  text-decoration: underline;
}

a:not([href]):not([tabindex]) {
  color: inherit;
  text-decoration: none;
}

a:not([href]):not([tabindex]):hover, a:not([href]):not([tabindex]):focus {
  color: inherit;
  text-decoration: none;
}

a:not([href]):not([tabindex]):focus {
  outline: 0;
}

.clearfix::after {
  display: block;
  clear: both;
  content: "";
}

@each $key in (left, right, center) {
  .text-#{$key} {
    text-align: #{$key} !important;
  }
}

@each $key, $color in $colors {
  .border#{$key} {
    border-color: #{$color} !important;
  }
  .text#{$key} {
    color: #{$color} !important;
  }
  .bg#{$key} {
    background-color: #{$color} !important;
  }
}

.ba0 {
  border: 0 !important;
}
@each $directionKey, $direction in $directions {
  .b#{$directionKey}-#{0} {
    border-#{$direction}: 0 !important;
  }
}

@each $key in (static, relative, absolute, fixed, sticky) {
  .position-#{$key} {
    position: #{$key} !important;
  }
}

@each $key in (top, bottom) {
  .fixed-#{$key} {
    position: fixed;
    @if $key == 'top' {
      top: 0;
    } @else {
      bottom: 0;
    }
    right: 0;
    left: 0;
    z-index: 1030;
  }
}

@each $key in (auto, hidden) {
  .overflow-#{$key} {
    overflow: #{$key} !important;
  }
}

@each $key in (left, right, none) {
  .float-#{$key} {
    float: #{$key} !important;
  }
}

@each $key, $val in $whSize {
  .w-#{$key} {
    width: #{$val} !important;
  }
  .h-#{$key} {
    width: #{$val} !important;
  }
}

@each $sizeKey, $size in $sizes {
  .ft-#{$sizeKey} {
    font-size: #{$size};
  }
}

/**
 * margin/padding
 */
@each $typeKey, $type in $spaceTypes {
  @each $sizeKey, $size in $sizes {
    // mt0, mr0, mb0, ml0
    @each $directionKey, $direction in $directions {
      .#{$typeKey}#{$directionKey}#{$sizeKey} {
        #{$type}-#{$direction}: $size;
      }
    }

    // mx0, my0
    .#{$typeKey}x#{$sizeKey} {
      #{$type}-left: $size;
      #{$type}-right: $size;
    }
    .#{$typeKey}y#{$sizeKey} {
      #{$type}-top: $size;
      #{$type}-bottom: $size;
    }

    // ma0
    .#{$typeKey}a#{$sizeKey} {
      #{$type}: $size;
    }
  }
}

@each $key in $displayType {
  .d-#{$key} {
    display: #{$key} !important;
  }
}

@each $key in (row, column, row-reverse, column-reverse) {
  .flex-#{$key} {
    flex-direction: #{$key} !important;
  }
}

@each $key in (wrap, nowrap, wrap-reverse) {
  .flex-#{$key} {
    flex-wrap: #{$key} !important;
  }
}

@each $key, $val in $flexDirection {
  .justify-#{$key} {
    justify-content: #{$val} !important;
  }
  .items-#{$key} {
    align-items: #{$val} !important;
  }
  .content-#{$key} {
    align-content: #{$val} !important;
  }
  .self-#{$key} {
    align-self: #{$val} !important;
  }
}

.flex-auto {
  flex: 1 1 auto;
  min-width: 0;
  min-height: 0;
}
